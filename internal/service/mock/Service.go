// Code generated by mockery v2.53.0. DO NOT EDIT.

package mock

import (
	models "avito-tech-merch/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetInfo provides a mock function with given fields: ctx, userID
func (_m *Service) GetInfo(ctx context.Context, userID int) (*models.UserInfo, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetInfo")
	}

	var r0 *models.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.UserInfo, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.UserInfo); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMerch provides a mock function with given fields: ctx, merchID
func (_m *Service) GetMerch(ctx context.Context, merchID int) (*models.Merch, error) {
	ret := _m.Called(ctx, merchID)

	if len(ret) == 0 {
		panic("no return value specified for GetMerch")
	}

	var r0 *models.Merch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.Merch, error)); ok {
		return rf(ctx, merchID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.Merch); ok {
		r0 = rf(ctx, merchID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Merch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, merchID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMerch provides a mock function with given fields: ctx
func (_m *Service) ListMerch(ctx context.Context) ([]*models.Merch, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListMerch")
	}

	var r0 []*models.Merch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Merch, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Merch); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Merch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, username, password
func (_m *Service) Login(ctx context.Context, username string, password string) (string, error) {
	ret := _m.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PurchaseMerch provides a mock function with given fields: ctx, userID, merchName
func (_m *Service) PurchaseMerch(ctx context.Context, userID int, merchName string) error {
	ret := _m.Called(ctx, userID, merchName)

	if len(ret) == 0 {
		panic("no return value specified for PurchaseMerch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = rf(ctx, userID, merchName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: ctx, username, password
func (_m *Service) Register(ctx context.Context, username string, password string) (string, error) {
	ret := _m.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferCoins provides a mock function with given fields: ctx, senderID, receiverID, amount
func (_m *Service) TransferCoins(ctx context.Context, senderID int, receiverID int, amount int) error {
	ret := _m.Called(ctx, senderID, receiverID, amount)

	if len(ret) == 0 {
		panic("no return value specified for TransferCoins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) error); ok {
		r0 = rf(ctx, senderID, receiverID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateToken provides a mock function with given fields: token
func (_m *Service) ValidateToken(token string) (int, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
