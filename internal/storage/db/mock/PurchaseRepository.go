// Code generated by mockery v2.53.0. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "avito-tech-merch/internal/models"
)

// PurchaseRepository is an autogenerated mock type for the PurchaseRepository type
type PurchaseRepository struct {
	mock.Mock
}

// CreatePurchase provides a mock function with given fields: ctx, purchase
func (_m *PurchaseRepository) CreatePurchase(ctx context.Context, purchase *models.Purchase) (int, error) {
	ret := _m.Called(ctx, purchase)

	if len(ret) == 0 {
		panic("no return value specified for CreatePurchase")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Purchase) (int, error)); ok {
		return rf(ctx, purchase)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Purchase) int); ok {
		r0 = rf(ctx, purchase)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Purchase) error); ok {
		r1 = rf(ctx, purchase)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPurchaseByUserID provides a mock function with given fields: ctx, userID
func (_m *PurchaseRepository) GetPurchaseByUserID(ctx context.Context, userID int) ([]*models.Purchase, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetPurchaseByUserID")
	}

	var r0 []*models.Purchase
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*models.Purchase, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*models.Purchase); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Purchase)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPurchaseRepository creates a new instance of PurchaseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPurchaseRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PurchaseRepository {
	mock := &PurchaseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
