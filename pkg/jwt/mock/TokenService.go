// Code generated by mockery v2.53.0. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// TokenService is an autogenerated mock type for the TokenService type
type TokenService struct {
	mock.Mock
}

// GenerateToken provides a mock function with given fields: userID, secretKey, expirationTime
func (_m *TokenService) GenerateToken(userID int, secretKey string, expirationTime int) (string, error) {
	ret := _m.Called(userID, secretKey, expirationTime)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string, int) (string, error)); ok {
		return rf(userID, secretKey, expirationTime)
	}
	if rf, ok := ret.Get(0).(func(int, string, int) string); ok {
		r0 = rf(userID, secretKey, expirationTime)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int, string, int) error); ok {
		r1 = rf(userID, secretKey, expirationTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseJWTToken provides a mock function with given fields: tokenString, secretKey
func (_m *TokenService) ParseJWTToken(tokenString string, secretKey string) (int, error) {
	ret := _m.Called(tokenString, secretKey)

	if len(ret) == 0 {
		panic("no return value specified for ParseJWTToken")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (int, error)); ok {
		return rf(tokenString, secretKey)
	}
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(tokenString, secretKey)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tokenString, secretKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenService creates a new instance of TokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenService {
	mock := &TokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
